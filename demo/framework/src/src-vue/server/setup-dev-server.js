const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const chokidar = require('chokidar')

const clientConfig = require('../../../webpack.config/ssr-vue-client')
const serverConfig = require('../../../webpack.config/ssr-vue-server')

const readFile = (fs, file) => {
  console.log('path.join(clientConfig.output.path, file)', fs)
  console.log('path.join(clientConfig.output.path, file)', path.join(clientConfig.output.path, file))
  try {
    console.log('readdirtest11',  fs.readdirSync(path.join(clientConfig.output.path)))
    let fsData = fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    return fsData
  } catch (e) {
    console.log('readFile-e', e)
  }
}


module.exports = function setupDevServer (app, templatePath, cb) {
  console.log('进入 setupDevServer')
  let bundle
  let template
  let clientManifest

  let ready
  const readyPromise = new Promise(r => { ready = r })
  const update = () => {
    if (bundle && clientManifest) {
      console.log('\x1b[33m%s\x1b[0m', 'update')
      cb(bundle, {
        template,
        clientManifest
      })
      ready()
    }
  }

  // read template from disk and watch
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
  })

  // modify client config to work with hot middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.mode = 'development'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    // new webpack.NoEmitOnErrorsPlugin() // 在编译出现错误时，使用 NoEmitOnErrorsPlugin 来跳过输出阶段。这样可以确保输出资源不会包含错误
  )

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
  })
  app.use(devMiddleware)
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()

    console.log('clientCompilerclientCompilerclientCompiler')
    stats.errors.forEach(err => console.error('stats.errors', err))
    stats.warnings.forEach(err => console.warn('stats.warnings',err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    update()
  })

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}
